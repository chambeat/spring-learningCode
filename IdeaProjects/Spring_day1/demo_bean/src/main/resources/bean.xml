<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 把对象的创建交给Spring来管理 -->


    <!-- Spring对bean的管理细节：
        1.创建bean对象的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->


    <!-- 创建bean的三种方式：
        1.使用默认构造函数创建。
            在Spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，就是使用默认构造函数创建bean对象。
            此时如果类中没有默认构造函数，则无法创建对象。
            <bean id="accountService" class="com.chm.service.impl.AccountServiceImpl"></bean>

        2.使用普通工厂中的方法创建对象 == 使用某个类中的方法创建对象，并存入Spring容器。（当使用别人写的jar包时适用）
            <bean id="instanceFactory" class="com.chm.factory.InstanceFactory"></bean>
            <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>

        3.使用静态工厂中的静态方法创建对象 == 使用某个类中的静态方法创建对象，并存入Spring容器。
            <bean id="accountService" class="com.chm.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->


    <!-- bean的作用范围调整：
        bean标签的scope属性：
            作用：用于指定bean的作用范围。
            取值：常用singleton和prototype。
                singleton：单例的（默认值）
                prototype：多例的
                request：作用于web的请求范围
                session：作用于web的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），在非集群环境下则是session。
        <bean id="accountService" class="com.chm.service.impl.AccountServiceImpl" scope="prototype"></bean>
    -->


    <!-- bean对象的生命周期：
        单例对象
            出生：当容器创建时，对象出生
            活着：只要容器还在，对象就会一直活着
            死亡：当容器销毁时，对象消亡
            *总结：单例对象的生命周期和容器相同。

        多例对象
            出生：只有等到要使用对象时，Spring框架才会创建。
            活着：对象只要还在被使用中，就会一直活着。
            死亡：当对象长时间不用，且无别的对象引用它时，就由Java的垃圾回收器回收。
    -->
    <bean id="accountService" class="com.chm.service.impl.AccountServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy">
    </bean>
</beans>